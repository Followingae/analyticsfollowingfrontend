Influencer Analytics Platform Implementation Plan
Built entirely with open-source components (except Supabase & Decodo) and shadcn/UI for frontend

‚∏ª

üìã Features Checklist
	1.	Core Platform
	‚Ä¢	Store all Decodo JSON fields in profiles.raw_data & posts.raw_data
	‚Ä¢	Global cache: auto-refresh only if data > 365 days old
	‚Ä¢	Per-User unlock window: once a User ‚Äúunlocks‚Äù a profile, they get 30 days of cached access
	‚Ä¢	Manual refresh (‚ÄúRe-unlock Profile‚Äù button) with confirm dialog & future credit deduction stub
	2.	Profile Overview
	‚Ä¢	Display influencer name, avatar, bio
	‚Ä¢	Show followers, following, post count
	‚Ä¢	Compute & display engagement rate (%)
	‚Ä¢	Compute & display posting consistency (posts/week)
	‚Ä¢	Generate a profile quality score (completeness & activity)
	3.	Follower Growth
	‚Ä¢	Line chart of follower count over time with tooltips
	4.	Posts & Reels Grid
	‚Ä¢	Responsive grid of recent content thumbnails
	‚Ä¢	Under each thumbnail: caption excerpt, likes, comments, views, engagement rate
	5.	Engagement Analytics
	‚Ä¢	Average likes/comments/views
	‚Ä¢	Engagement rate breakdown by type (posts, reels, stories)
	‚Ä¢	Reach metrics: effective follower rate & unique reach
	‚Ä¢	Engagement-over-time chart
	6.	Audience Insights
	‚Ä¢	Raw audience metrics from Decodo (growth history, top cities/regions if provided)
	‚Ä¢	Placeholder panels for ML-driven demographics
	7.	Mentions
	‚Ä¢	List of brand/hashtag mentions
	‚Ä¢	For each: mentioner profile, post link, timestamp, text snippet
	8.	Campaigns
	‚Ä¢	Campaign creation (logo, title, date range)
	‚Ä¢	Attach post URLs & fetch analytics per post
	‚Ä¢	Aggregate campaign reports (averages, totals, sentiment summaries)
	9.	Billing & Credits
	‚Ä¢	Stripe subscription integration
	‚Ä¢	User credits balance display & deduction logic
	‚Ä¢	Subscription gating (disable features if expired)
	10.	AI/ML Enhancements
	‚Ä¢	Audience Demographics: age & gender (DeepFace), location (spaCy)
	‚Ä¢	Creator Metadata: location & content category (spaCy + Transformers)
	‚Ä¢	Sentiment Analysis: comment sentiment (VADER/TextBlob)
	‚Ä¢	Zero-Shot Discovery: semantic search via text embeddings

‚∏ª

üöÄ Module-by-Module Roadmap

Work sequentially. After each module, verify completion before proceeding.

Module 1: Project Initialization

Commit: chore: initialize project structure and base deps
	‚Ä¢	Create /backend and /frontend folders
	‚Ä¢	Backend:
	‚Ä¢	Initialize Python venv
	‚Ä¢	Install fastapi, uvicorn, sqlalchemy, aiohttp, python-dotenv, asyncpg
	‚Ä¢	Create requirements.txt
	‚Ä¢	Frontend:
	‚Ä¢	Scaffold Next.js 15 project
	‚Ä¢	Install tailwindcss, postcss, autoprefixer
	‚Ä¢	Install @shadcn/ui, next-themes, lucide-react, @tabler/icons-react
	‚Ä¢	Run npx tailwindcss init -p and npx shadcn-ui init
	‚Ä¢	Add placeholder .env (backend) and .env.local (frontend)

‚úÖ Module 1 complete.

‚∏ª

Module 2: Core Data Models & Migrations

Commit: feat: add core database models
	‚Ä¢	Define SQLAlchemy models in backend/app/models.py:
	‚Ä¢	User (id, email, hashed_password, role, credits)
	‚Ä¢	Profile (id, username, raw_data JSON, last_refreshed DateTime)
	‚Ä¢	Post (id, profile_id, raw_data JSON)
	‚Ä¢	UserProfileAccess (id, user_id, profile_id, last_accessed DateTime)
	‚Ä¢	Configure Base.metadata.create_all(bind=engine) on startup
	‚Ä¢	Verify tables creation locally (SQLite)

‚úÖ Module 2 complete.

‚∏ª

Module 3: Profile Fetch & Store Logic

Commit: feat: implement Decodo profile fetch and store
	‚Ä¢	In crud.py, implement fetch_and_store_profile(db, username) to:
	‚Ä¢	Call Decodo via SmartProxyClient
	‚Ä¢	Upsert Profile.raw_data & last_refreshed
	‚Ä¢	Upsert each post into Post.raw_data
	‚Ä¢	Write unit tests mocking Decodo responses

‚úÖ Module 3 complete.

‚∏ª

Module 4: Caching & Unlock Rules

Commit: feat: add caching and per-user unlock logic
	‚Ä¢	GET /profiles/{username}:
	1.	If no profile or global age ‚â• 365 days ‚Üí fetch & upsert
	2.	Else if User‚Äôs last_accessed < 30 days ‚Üí return cached raw_data
	3.	Else ‚Üí HTTP 409 ‚ÄúUnlock expired; use ?force=true‚Äù
	‚Ä¢	Helpers in crud.py to get/update UserProfileAccess
	‚Ä¢	Tests for all control flows

‚úÖ Module 4 complete.

‚∏ª

Module 5: Manual Refresh Endpoint

Commit: feat: add manual refresh endpoint
	‚Ä¢	POST /profiles/{username}/refresh:
	‚Ä¢	Accept ?force=true
	‚Ä¢	If not forced and global < 365 days ‚Üí 409 warning
	‚Ä¢	Else ‚Üí call fetch_and_store_profile, update UserProfileAccess
	‚Ä¢	Stub credit deduction logic
	‚Ä¢	Tests for both forced and non-forced paths

‚úÖ Module 5 complete.

‚∏ª

Module 6: Analytics Page Skeleton

Commit: feat: add analytics page UI skeleton
	‚Ä¢	Create frontend/app/analytics/[username]/page.tsx with:
	‚Ä¢	Fetch GET endpoint on mount; handle HTTP 409 with confirm() + forced POST
	‚Ä¢	Render raw fields in shadcn Card components
	‚Ä¢	‚ÄúRe-unlock Profile‚Äù shadcn Button & Spinner

‚úÖ Module 6 complete.

‚∏ª

Module 7: Follower Growth Chart

Commit: feat: add follower growth chart
	‚Ä¢	Extract dates and values from profile.raw_data.history
	‚Ä¢	Render a shadcn <Chart> with <ChartXAxis>, <ChartYAxis>, <ChartLine>, <ChartTooltip> inside a shadcn Card

‚úÖ Module 7 complete.

‚∏ª

Module 8: Posts & Reels Grid

Commit: feat: add posts grid with thumbnails
	‚Ä¢	GET /profiles/{username}/posts returns post array from DB
	‚Ä¢	Frontend <PostsGrid />:
	‚Ä¢	Use shadcn Grid
	‚Ä¢	Load thumbnails via backend image-proxy (/proxy/image?url=‚Ä¶)
	‚Ä¢	Show caption, likes, comments, views per item

‚úÖ Module 8 complete.

‚∏ª

Module 9: Engagement & Audience Tabs

Commit: feat: add engagement and audience tabs
	‚Ä¢	Engagement Tab:
	‚Ä¢	GET /profiles/{username}/engagement computing averages, breakdowns, reach
	‚Ä¢	<EngagementStats /> page with shadcn charts & cards
	‚Ä¢	Audience Tab:
	‚Ä¢	GET /profiles/{username}/audience serving raw audience fields
	‚Ä¢	<AudienceRaw /> page with shadcn panels & charts

‚úÖ Module 9 complete.

‚∏ª

Module 10: Mentions, Campaigns & Billing

Commit: feat: add mentions, campaigns, and billing modules
	‚Ä¢	Mentions: GET /profiles/{username}/mentions + <Mentions /> list
	‚Ä¢	Campaigns: CRUD endpoints & UI for campaign creation, attaching posts, campaign analytics
	‚Ä¢	Billing: Stripe integration, user credits balance, subscription gating & credit deduction

‚úÖ Module 10 complete.

‚∏ª

Future AI/ML Enhancements
	‚Ä¢	Module 11: Audience Demographics (DeepFace + spaCy)
	‚Ä¢	Module 12: Creator Metadata (spaCy + Transformers)
	‚Ä¢	Module 13: Sentiment Analysis (VADER/TextBlob)
	‚Ä¢	Module 14: Zero-Shot Discovery (embeddings)

‚∏ª

Instructions for Claude Code:
	1.	Implement Module 1 only.
	2.	Return ‚Äú‚úÖ Module 1 complete‚Äù for review.
	3.	Upon approval, proceed to Module 2, and so on‚Äînever skip ahead.